import org.gradle.internal.os.OperatingSystem

buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
    }
}

plugins {
    id "org.springframework.boot" version "2.0.3.RELEASE"
    id "org.sonarqube" version "2.6"
    id "net.ltgt.apt-eclipse" version "0.16"
    id "net.ltgt.apt" version "0.16"
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
}

apply plugin: 'java'
sourceCompatibility = 8
targetCompatibility = 8
assert System.properties['java.specification.version'] == '1.8'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.lebinh'
version = '0.0.1-SNAPSHOT'

defaultTasks 'bootRun'

bootWar {
   mainClassName = 'com.lebinh.skeleton.SkeletonApplication'
}

war {

}

springBoot {
    mainClassName = 'com.lebinh.skeleton.SkeletonApplication'
    buildInfo()
}

if (OperatingSystem.current().isWindows()) {
    task pathingJar(type: Jar) {
        dependsOn configurations.runtime
        appendix = 'pathing'

        doFirst {
            manifest {
                attributes 'Class-Path': configurations.runtime.files.collect {
                    it.toURI().toURL().toString().replaceFirst(/file:\/+/, '/').replaceAll(' ', '%20')
                }.join(' ')
            }
        }
    }

    bootRun {
        dependsOn pathingJar
        doFirst {
            classpath = files("$buildDir/classes/java/main", "$buildDir/resources/main", pathingJar.archivePath)
        }

        jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n"]

    }
} else {
    bootRun {
        jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n"]
    }
}

apply from: 'gradle/sonar.gradle'
apply from: 'gradle/liquibase.gradle'

if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}

configurations {
    providedRuntime
    compile.exclude module: "spring-boot-starter-tomcat"
}

// repositories
repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-autoconfigure:2.0.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-security:2.0.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:2.0.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-mail:2.0.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf:2.0.3.RELEASE'

    compile 'org.liquibase:liquibase-core:3.6.1'
    runtime 'mysql:mysql-connector-java:8.0.11'

    compile 'org.springframework.security:spring-security-config:5.0.6.RELEASE'
    compile 'org.springframework.security:spring-security-data:5.0.6.RELEASE'
    compile 'org.springframework.security:spring-security-web:5.0.6.RELEASE'
    compile 'io.jsonwebtoken:jjwt:0.9.0'

    compile "org.apache.poi:poi:3.17"
    compile "org.apache.poi:poi-ooxml:3.17"

    compile 'org.apache.commons:commons-lang3:3.7'

    compile 'org.apache.tomcat:tomcat-catalina:9.0.8'

    testCompile 'org.springframework.boot:spring-boot-starter-test:2.0.3.RELEASE'
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

task stage(dependsOn: 'bootRepackage') {
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources,bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
